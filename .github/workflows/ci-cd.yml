name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  DJANGO_SETTINGS_MODULE: config.settings.dev
  DB_ENGINE: django.db.backends.postgresql
  DB_NAME: test_db
  DB_USER: test_user
  DB_PASSWORD: test_pass
  DB_HOST: localhost
  DB_PORT: 5432
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  REDIS_URL: redis://localhost:6379/0

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db  # Use literal values instead of env references
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client redis-tools
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==2.1.3
          poetry config virtualenvs.create false
          poetry install --no-root --only main,dev
      
      - name: Wait for services
        run: |
          # Wait for PostgreSQL to be ready
          timeout 60s bash -c 'until pg_isready -h localhost -p 5432 -U test_user; do sleep 1; done'
          
          # Wait for Redis to be ready
          timeout 60s bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do sleep 1; done'
      
      - name: Run migrations
        run: python manage.py migrate --no-input
      
      - name: Run tests
        env:
          CACHES_DEFAULT_LOCATION: redis://localhost:6379/0
        run: pytest

  build-and-push:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          IMAGE_TAG: ${{ github.ref_name }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          REPOSITORY_NAME: ${{ github.event.repository.name }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          
          # Copy docker-compose and .env files
          scp -o StrictHostKeyChecking=no -i private_key docker-compose.yml $REMOTE_USER@$REMOTE_HOST:/path/to/your/app/
          
          ssh -o StrictHostKeyChecking=no -i private_key $REMOTE_USER@$REMOTE_HOST << 'EOF'
            cd /path/to/your/app
            export IMAGE_TAG="$IMAGE_TAG"
            export DOCKER_HUB_USERNAME="$DOCKER_HUB_USERNAME"
            export REPOSITORY_NAME="$REPOSITORY_NAME"
            docker compose pull
            docker compose down
            docker compose up -d
            docker system prune -f
          EOF
          
          rm -f private_key